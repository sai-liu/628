setwd("C:/Users/liuyi/OneDrive/xuexi2/628/")
data=read.csv("BodyFat.csv")[,-1]
getwd()
data=read.csv("BodyFat.csv")[,-1]
data=read.csv("BodyFat.csv")[,-1]
data=read.csv("bodyfat.csv")[,-1]
setwd("C:/Users/liuyi/OneDrive/xuexi2/628/bodyfat/")
data=read.csv("BodyFat.csv")[,-1]
View(data)
data_raw=read.csv("BodyFat.csv")[,-1]
data_1=data_raw
names(data_1)=c("y",paste("x",1:15,sep = ""))
c(1,2,3)[-1]
paste(c("a","b"))
par=paste(names(data_1)[-1],"*",sep="")
lm_model=lm(data$y~x1*x2*x3*x4*x5*x6*x7+,data=data_1)
lm_model=lm(data$y~x1*x2*x3*x4*x5*x6*x7,data=data_1)
View(data_1)
lm_model=lm(y~x1*x2*x3*x4*x5*x6*x7,data=data_1)
lm_model=lm(y~x1*x2*x3*x4*x5*x6*x7*x8*x9*x10*x11*x12*x13*x14*x15,data=data_1)
summary(lm_model)
lm_model$coefficients
length(lm_model$coefficients)
choose(15,2)
choose(15,3)
choose(15,4)
choose(15,5)
choose(2,15)
choose(15,6)
choose(15,7)
choose(15,2)
View(data)
lm_model=lm(y~.+,data=data_1)
lm_model=lm(y~.,data=data_1)
summary(lm_model)
library(leaps)
model.matrix(lm_model)
X <- model.matrix(lm_model)[,-1]
election.leaps <- leaps(X, data_1$y, nbest=1, method='adjr2')
best.model.adjr2 <- election.leaps$which[which.max(election.leaps$adjr2),]
colnames(X)[best.model.adjr2]
plot(election.leaps$size, election.leaps$adjr2, pch=23, bg='orange', cex=2,
xlab="Number of Parameters", ylab="Adjusted R2 of the Best Model",
main="Adjusted R^2 for Each Possible Model in Our Election Data")
rm(list=ls())
setwd("C:/Users/liuyi/OneDrive/xuexi2/628/bodyfat/")
data_raw=read.csv("BodyFat.csv")[,-1]
data_1=data_raw
names(data_1)=c("y",paste("x",1:15,sep = ""))
lm_election=lm(y~.,data=data_1)
X <- model.matrix(lm_election)[,-1]
election.leaps <- leaps(X, data_1$y, nbest=1, method='adjr2')
best.model.adjr2 <- election.leaps$which[which.max(election.leaps$adjr2),]
colnames(X)[best.model.adjr2]
election.leaps <- leaps(X, data_1$y, nbest=1, method='Cp')
best.model.adjr2 <- election.leaps$which[which.max(election.leaps$Cp),]
colnames(X)[best.model.adjr2]
plot(election.leaps$size, election.leaps$adjr2, pch=23, bg='orange', cex=2,
xlab="Number of Parameters", ylab="Adjusted R2 of the Best Model",
main="Adjusted R^2 for Each Possible Model in Our Election Data")
election.leaps <- leaps(X, data_1$y, nbest=1, method='r2')
best.model.adjr2 <- election.leaps$which[which.max(election.leaps$r2),]
colnames(X)[best.model.adjr2]
plot(election.leaps$size, election.leaps$adjr2, pch=23, bg='orange', cex=2,
xlab="Number of Parameters", ylab="Adjusted R2 of the Best Model",
main="Adjusted R^2 for Each Possible Model in Our Election Data")
election.leaps <- leaps(X, data_1$y, nbest=1, method='adjr2')
best.model.adjr2 <- election.leaps$which[which.max(election.leaps$adjr2),]
colnames(X)[best.model.adjr2]
election.step.backward <- step(lm(y~., data_1), direction='backward')
colnames(X)[best.model.adjr2]
election.step.backward <- step(lm(y~., data_1), direction='forward')
election.step.backward <- step(lm(y~x1, data_1), direction='forward')
election.step.backward <- step(lm(y~1, data_1),list(upper=~.), direction='forward')
election.step.backward <- step(lm(y~1, data_1),list(upper=~.), direction='forward', k=log(nrow(X)))
election.step.backward <- step(lm(y~1, data_1),list(upper=~x1+x2+x3+x4), direction='forward', k=log(nrow(X)))
election.step.backward <- step(lm(y~1, data_1),list(upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11+x12+x13+x14+x15), direction='forward', k=log(nrow(X)))
election.step.backward <- step(lm(y~1, data_1),list(upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11+x12+x13+x14+x15), direction='forward', k=2)
election.step.backward <- step(lm(V ~ I + D + W + G + G:I + P + N, election.table), direction='backward')
election.step.backward <- step(lm(V ~ I + D + W + G + G:I + P + N, data_1), direction='backward')
election.step.backward <- step(lm(y~., data_1), direction='backward')
election.step.backward <- step(lm(y~1, data_1),list(upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11+x12+x13+x14+x15), direction='forward', k=2)
election.step.backward <- step(lm(y~., data_1), direction='backward')
election.step.both <- step(lm(lm(y~., data_1), direction='both')
election.step.both <- step(lm(lm(y~., data_1), direction='both'))
election.step.both <- step(lm(y~., data_1), direction='both')
election.step.both <- step(lm(y~x1+x2+x3, data_1), direction='both')
library(shiny)
install.packages("shiny")
library(shiny)
shinyApp(ui=ui,server=server)
server=function(input,output){}
shinyApp(ui=ui,server=server)
ui=fluidPage()
server=function(input,output){}
shinyApp(ui=ui,server=server)
ui=fluidPage("Hello World")
server=function(input,output){}
shinyApp(ui=ui,server=server)
colnames(X)[best.model.adjr2]
lm_model=lm(y~x1+x2+x3+x7+x12+x13,data_1)
lm_model$coefficients
View(data_1)
?numericInput
View(data_raw)
library(shiny)
ui=fluidPage(
numericInput(
inputId="density",
label="Density",
value=1),
dataTableOutput("Bodyfat"))
server=function(input,output){
output$Bodyfat=renderDataTable({423.058-385*input$density})
}
shinyApp(ui=ui,server=server)
server=function(input,output){
output$Bodyfat=renderDataTable({print(423.058-385*input$density)})
}
shinyApp(ui=ui,server=server)
server=function(input,output){
output$Bodyfat=renderPrint({423.058-385*input$density})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui=fluidPage(
numericInput(
inputId="density",
label="Density",
value=1),
textOutput("Bodyfat"))
server=function(input,output){
output$Bodyfat=renderPrint({423.058-385*input$density})
}
shinyApp(ui=ui,server=server)
print("a",1)
?print
paste("aa aa",1,sep = "")
server=function(input,output){
output$Bodyfat=renderPrint({a=(423.058-385*input$density);paste("Your Bodyfat is ",a,sep="")})
}
shinyApp(ui=ui,server=server)
lm_model$coefficients
library(shiny)
ui=fluidPage(
numericInput(
inputId="density",
label="Density",
value=1),
numericInput(
inputId="age",
label="Age",
value=1),
numericInput(
inputId="weight",
label="Weight",
value=1),
numericInput(
inputId="chest",
label="Chest",
value=1),
numericInput(
inputId="ankle",
label="Ankle",
value=1),
numericInput(
inputId="biceps",
label="Biceps",
value=1),
textOutput("Bodyfat"))
server=function(input,output){
output$Bodyfat=renderPrint({a=(423.058-384.997*input$density+0.011*input$age+0.013*weight+0.033*chest-0.083*ankle-0.062*biceps);paste("Your Bodyfat is ",a,sep="")})
}
shinyApp(ui=ui,server=server)
ui=fluidPage(
numericInput(
inputId="density",
label="Density",
value=1),
numericInput(
inputId="age",
label="Age",
value=1),
numericInput(
inputId="weight",
label="Weight",
value=1),
numericInput(
inputId="chest",
label="Chest",
value=1),
numericInput(
inputId="ankle",
label="Ankle",
value=1),
numericInput(
inputId="biceps",
label="Biceps",
value=1),
textOutput("Bodyfat"))
server=function(input,output){
output$Bodyfat=renderPrint({a=(423.058-384.997*input$density+0.011*input$age+0.013*input$weight+0.033*input$chest-0.083*input$ankle-0.062*input$biceps);paste("Your Bodyfat is ",a,sep="")})
}
shinyApp(ui=ui,server=server)
runApp('app')
runApp('app')
runApp('bodyfat.R')
runApp('app')
install.packages("rsconnect")
library("rsconnect")
rsconnect::setAccountInfo(name='sailiu', token='DFB87E0ECFE0841752A1CD3704205D67', secret='tLJXt9kp6YbK5sBseLrnP5hT8JJ/l8oyB3tH/PaS')
deployApp()
View(data_raw)
data_raw=read.csv("BodyFat.csv")
View(data_raw)
data_raw=read.csv("BodyFat.csv")[,-1]
